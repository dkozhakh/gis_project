/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var l7Raw = ee.ImageCollection("LANDSAT/LE7_L1T");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//centering at Bangkok, Thailand
var roi_Shanghai = ee.Geometry.Point(31.2411740353, 121.474674768);
var buffer_Shanghai = roi_Shanghai.buffer(15000);
Map.addLayer(buffer_Moscow,{}, "Moscow");

Map.setCenter(31.2411740353, 121.474674768, 10);

//Filtering to 2000, 2005, 2010, 2015 summer
var L7Filtered2015 = l7Raw.filterDate('2015-06-01','2015-08-31').filterBounds(buffer_Moscow);
var L7Filtered2010 = l7Raw.filterDate('2010-06-01','2010-08-31').filterBounds(buffer_Moscow);
var L7Filtered2005 = l7Raw.filterDate('2005-06-01','2005-08-31').filterBounds(buffer_Moscow);
var L7Filtered2000 = l7Raw.filterDate('2000-06-01','2000-08-31').filterBounds(buffer_Moscow);

Map.addLayer(L7Filtered2000,{},'Moscow 2000');
Map.addLayer(L7Filtered2005,{},'Moscow 2005');
//Creating Simple Composite for cleaner image

var l7Composite15= ee.Algorithms.Landsat.simpleComposite({
  collection: L7Filtered2015,
  asFloat: true
});

var l7Composite10= ee.Algorithms.Landsat.simpleComposite({
  collection: L7Filtered2010,
  asFloat: true
});

var l7Composite05= ee.Algorithms.Landsat.simpleComposite({
  collection: L7Filtered2005,
  asFloat: true
});

var l7Composite00= ee.Algorithms.Landsat.simpleComposite({
  collection: L7Filtered2000,
  asFloat: true
});

//Now calculate NDVI, NDWI, NDBI to see what's happeing, train classificator

//NDVI
var ndvi15 = l7Composite15.normalizedDifference(['B4', 'B3']).rename('NDVI');
var ndvi10 = l7Composite10.normalizedDifference(['B4', 'B3']).rename('NDVI');
var ndvi05 = l7Composite05.normalizedDifference(['B4', 'B3']).rename('NDVI');
var ndvi00 = l7Composite00.normalizedDifference(['B4', 'B3']).rename('NDVI');

//NDBI
var ndbi15 = l7Composite15.normalizedDifference(['B5', 'B4']).rename('NDBI');
var ndbi10 = l7Composite10.normalizedDifference(['B5', 'B4']).rename('NDBI');
var ndbi05 = l7Composite05.normalizedDifference(['B5', 'B4']).rename('NDBI');
var ndbi00 = l7Composite00.normalizedDifference(['B5', 'B4']).rename('NDBI');

//NDWI

var ndwi15 = l7Composite15.normalizedDifference(['B2', 'B4']).rename('NDWI');
var ndwi10 = l7Composite10.normalizedDifference(['B2', 'B4']).rename('NDWI');
var ndwi05 = l7Composite05.normalizedDifference(['B2', 'B4']).rename('NDWI');
var ndwi00 = l7Composite00.normalizedDifference(['B2', 'B4']).rename('NDWI');

var landcover = BU.merge(NBU);

//SETTING BANDS
var bands = ['B1', 'B2', 'B3', 'B4', 'B5', 'B6_VCID_2', 'B7', 'NDVI','NDBI','NDWI'];

//Adding bands to composites
var input15 = l7Composite15.addBands(ndvi15).addBands(ndbi15).addBands(ndwi15);
var input10 = l7Composite10.addBands(ndvi10).addBands(ndbi10).addBands(ndwi10);
var input05 = l7Composite05.addBands(ndvi05).addBands(ndbi05).addBands(ndwi05);
var input00 = l7Composite00.addBands(ndvi00).addBands(ndbi00).addBands(ndwi00);

//Creating the training dataset

var training = input15.select(bands).sampleRegions({
collection: landcover,
properties: ['landcover'],
scale: 30
});

//Choosing classifier
var classifier = ee.Classifier.randomForest({numberOfTrees: 20})
.train({
features: training,
classProperty: 'landcover',
inputProperties: bands
});

//Getting trained classifier
var trained = classifier.train(training, 'landcover', bands);

//?????Do I put 'class' or 'landcover' in there???? Well, apparently landcover it is

//Classifying 2015,2010,2005,2000 with 2015 trained classifier

var classified2000 = input00.select(bands).classify(trained);
var classified2005 = input05.select(bands).classify(trained);
var classified2010 = input10.select(bands).classify(trained);
var classified2015 = input15.select(bands).classify(trained);

//Mapping results

Map.addLayer(classified2015.mask(classified2015), {'min':0, 'max':1 , 'palette':'ff133f'},'BU 2015');
Map.addLayer(classified2010.mask(classified2010), {'min':0, 'max':1 , 'palette':'b119ff'},'BU 2010');
Map.addLayer(classified2005.mask(classified2005), {'min':0, 'max':1 , 'palette':'blue'},'BU 2005');
Map.addLayer(classified2000.mask(classified2000), {'min':0, 'max':1 , 'palette':'1dfff4'},'BU 2000');

//Exporting to Assets
Export.image.toAsset({ 
  image: classified2015,
  region: buffer_Bangkok,
  description: 'built-up areas, Moscow, 2015', assetId: 'BuiltUpAreasMoscow2015',
  scale: 30});
  
//Exporting to Google Drive
Export.image.toDrive(
  {image: classified2015,
    description: 'BU Moscow,2015',
    fileNamePrefix: 'bu_moscow_2015',
    region: buffer_Bangkok,
    scale: 30, 
    maxPixels: 1e9
  });
  
  
  
Map.addLayer(ndbi15,{'min':-0.5197, 'max':0.664},'NDBI 2015');
Map.addLayer(ndbi00,{'min':-0.5197, 'max':0.664},'NDBI 2000');

//Calculate a confusion matrix
var accuracyMatrix = trained.confusionMatrix();
print('Resubstitution error matrix: ', accuracyMatrix);

//Estimate the overall accuracy rate
var overallAccuracy = accuracyMatrix.accuracy();
print('Training overall accuracy: ', overallAccuracy);

//Why is my classifier 100% correct???!!!!


//How big is urban area??? And it's not working...
var urban_Bangkok2015masked = classified2015.mask(classified2015);
var urban_Bangkok2015 = urban_Bangkok2015masked.clip(buffer_Bangkok);

var urbanLandUseArea= urban_Bangkok2015.multiply(ee.Image.pixelArea());

var stats = urbanLandUseArea.reduceRegion(
{
'reducer': ee.Reducer.count(),
'scale': 30,
'geometry': buffer_Bangkok,
'maxPixels': 1e9
});
print(stats);

print('urban area: ' + stats.getInfo() + ' square meters');



